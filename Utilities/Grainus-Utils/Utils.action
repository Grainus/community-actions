{
  "comment": "Exported from https://atlas.bot",
  "formatVersion": 2,
  "exportedAt": "2023-03-16T18:51:58.012Z",
  "actions": [
    {
      "id": "a49fa942-e05d-45fb-b25d-39b0f5011cca",
      "flags": 0,
      "name": "Utils",
      "trigger": {
        "type": 2,
        "channelId": null
      },
      "disabled": false,
      "content": "// TODO: When scopes are fixed, unmangle variable names\r\n\r\n// See https://docs.python.org/3/library/functions.html for more info.\r\n\r\n[#function;abs;{=_abs__x}]\r\n    // Return the absolute value of the argument.\r\n    {return;{math;sqrt({$_abs__x}^2)}}\r\n[/function]\r\n\r\n// All and any missing variadic syntax\r\n\r\n[#function;min;{=_min__arr}]\r\n    // Return the smallest item in an array.\r\n    {=_min__sorted;{sort;{$_min__arr}}}\r\n    {return;{shift;{$_min__sorted}}}\r\n[/function]\r\n\r\n[#function;max;{=_max__arr}]\r\n    // Return the greatest item in an array.\r\n    {=_max__sorted;{sort;{$_max__arr}}}\r\n    {return;{pop;{$_max__sorted}}}\r\n[/function]\r\n\r\n[#function;sum;{=_sum__arr};{=_sum__start}]\r\n    // Return the sum of the items in an array. The first argument\r\n    // is the array. The second is the start value, defaulting to 0.\r\n    {=_sum__total;{or;{$_sum__start};0}}\r\n    [#for;{=_sum__val};{$_sum__arr}]\r\n        {=_sum__total;{math;{$_sum__total}+{$_sum__val}}}\r\n    [/for]\r\n    {return;{$_sum__total}}\r\n[/function]\r\n\r\n// Thanks to Can eh dian for making the first version of this function\r\n[#function;bool.fromExpr;{=_bool__expr}]\r\n    // Parse a boolean expression from a string and return its value.\r\n    // Allows assigning a boolean without using `{if}`.\r\n    // Example: {=isbig;{bool.fromExpr;{$value}>10}}\r\n\r\n    // Preprocessing numbers to allow \"1 == 1\" to be true\r\n    {=_bool__regnum;/[0-9_\\s]+([><!=]=\\{0,2\\})[0-9_\\s]+/}\r\n    [#if;{$_bool__expr};matches;{$_bool__regnum}]\r\n        {=_bool__expr;{replace;{$_bool__expr};/_|\\s/g;}}\r\n    [/if]\r\n\r\n    {=_bool__expr;{split;{$_bool__expr};/(includes|matches|[><!=]=\\{0,2\\})/}}\r\n    \r\n    {return;\r\n        {if;{$_bool__expr.0};{$_bool__expr.1};{$_bool__expr.2};\r\n            True\r\n            ;\r\n            False\r\n        }\r\n    }\r\n[/function]\r\n\r\n[#function;ord;{=_ord__c}]\r\n    // Return the unicode code point for a specified character.\r\n    {=_ord__ret;{fetch;https://ucdapi.org/unicode/latest/chars/{$_ord__c}}}\r\n    {return;{$_ord__ret.body.0.decomposition.0}}\r\n[/function]\r\n\r\n[#function;not;{=_not__bool}]\r\n    // Return the logical complement of the argument as a boolean.\r\n    {return;{if;{$_not__bool};False;True}}\r\n[/function]\r\n\r\n[#function;getstore;{=_getstore__name};{=_getstore__default}]\r\n    // Fetch a permanent variable, and return a default value\r\n    // if it is not found.\r\n    // Requires: `{is_none}`\r\n    {=_getstore__value;{store.get;{$_getstore__name}}}\r\n    [#if;{is_none;{$_getstore__value}}]\r\n        {return;{$_getstore__default}}\r\n    [/if]\r\n    {return;{$_getstore__value}}\r\n[/function]\r\n\r\n[#function;getattr;{=_getattr__object};{=_getattr__name};{=_getattr__default}]\r\n    // Get a named attribute from a JSON object. A default value can be\r\n    // provided and is returned in case the attribute doesn't exist.\r\n    // Requires: `{hasattr}`, `{not}`\r\n    [#if;{not;{hasattr;{$_getattr__object};{$_getattr__name}}}]\r\n        // When no default value is given, the variable has the same value\r\n        // as a non-present attribute (None).\r\n        {return;{$_getattr__default}}\r\n    [/if]\r\n    {return;{$_getattr__object.{$_getattr__name}}}\r\n[/function]\r\n\r\n[#function;hasattr;{=_hasattr__object};{=_hasattr__name}]\r\n    // Return whether an object has an attribute with the given name.\r\n    {return;{includes;{keys;{$_hasattr__object}};{$_hasattr__name}}}\r\n[/function]\r\n\r\n[#function;setattr;{=_setattr__object};{=_setattr__name};{=_setattr__value}]\r\n    // Set a named attribute on an object to the specifiec value.\r\n    {=_setattr__object.{$_setattr__name};{$_setattr__value}}\r\n[/function]\r\n\r\n[#function;setdefault;{=_setdefault__object};{=_setdefault__name};{=_setdefault__value}]\r\n    // If the given object does not have the named attribute, set\r\n    // it to the given value. Otherwise, do nothing.\r\n    // Requires: `{hasattr}`, `{not}`\r\n    [#if;{not;{hasattr;{$_setdefault__object};{$_setdefault__name}}}]\r\n        {=_setdefault__object.{$_setdefault__name};{$_setdefault__value}}\r\n    [/if]\r\n[/function]\r\n\r\n[#function;isinstance;{=_isinstance__obj};{=_isinstance__types}]\r\n    // Return whether an object is of a specified type or types.\r\n    // When the second argument is a list of types, return true if any\r\n    // of the types match.\r\n    // This function is not recommended as there is currently no\r\n    // reliable way to do what it aims to do in pella.\r\n    {=type;{casing mode=lower;{$_isinstance__types}}}\r\n\r\n    [#if;{[array;list]};includes;{$_isinstance__types}]\r\n        // The includes tag only works with arrays\r\n        {return;{catch;{void;{includes;{$_isinstance__obj};}}True;False}}\r\n    [/if]\r\n\r\n    [#if;{$_isinstance__type};==;object]\r\n        // The keys tag only works with objects\r\n        {return;{catch;{void;{keys;{$_isinstance__obj}}}True;False}}\r\n    [/if]\r\n\r\n    // Numbers and strings currently indistinguishable from what I can tell\r\n\r\n    // Only iterate when necessary to allow simple recursion\r\n    // [#if;{isinstance;{$types};array}]  // Change back when scopes are fixed\r\n    [#if;{catch;{void;{includes;{$_isinstance__types};}}True;False}]\r\n        [#for;{=_isinstance__type};{$_isinstance__types}]  // Change back when scopes are fixed\r\n        // {=typescopy;{$types}}\r\n        // [#for;{=type};{$typescopy}]\r\n            [#if;{isinstance;{$_isinstance__obj};{$_isinstance__type}}]\r\n                {return;True}\r\n            [/if]\r\n        [/for]\r\n    [/if]\r\n    {return;False}\r\n[/function]\r\n\r\n[#function;range;{=_range__start};{=_range__stop};{=_range__step}]\r\n    // Return an array with a sequence of integers from start to stop by step.\r\n    // See https://docs.python.org/3/library/functions.html#func-range\r\n    // Requires: `{iterx}`, `{not}`\r\n    {=_range__step;{or;{$_range__step};1}}\r\n    [#if;{not;{$_range__stop}}]\r\n        {=_range__stop;{$_range__start}}\r\n        {=_range__start;0}\r\n    [/if]\r\n    {=_range__gen;{iterx;{math;({$_range__stop}-{$_range__start})/{$_range__step}}}}\r\n    {=_range__ret;{[]}}\r\n    {=_range__val;{$_range__start}}\r\n    [#for;{=_};{$_range__gen}]\r\n        {push;{$_range__ret};{$_range__val}}\r\n        {=_range__val;{math;{$_range__val}+{$_range__step}}}\r\n    [/for]\r\n    {return;{$_range__ret}}\r\n[/function]\r\n\r\n[#function;iterx;{=_iterx__amount};{=_iterx__values}]\r\n    // Return an array with a specified number of elements.\r\n    // Use this over `{range}` if you only want to iterate a certain number\r\n    // of times, as it does not use an expensive tag.\r\n    {return;{random return_array=true length={$_iterx__amount};{or;{$_iterx__values};0}}}\r\n[/function]\r\n\r\n[#function;reversed;{=_reversed__seq}]\r\n    // Return a new array with items going from end to start.\r\n    {=_reversed__indx;{length;{$_reversed__seq}}}\r\n    {=_reversed__ret;{[]}}\r\n    [#for;{=_};{$_reversed__seq}]\r\n        {=_reversed__indx;{math;{$_reversed__indx}-1}}\r\n        {push;{$_reversed__ret};{$_reversed__seq.{$_reversed__indx}}}\r\n    [/for]\r\n    {return;{$_reversed__ret}}\r\n[/function]\r\n\r\n\r\n// GENERAL QOL FUNCTIONS\r\n\r\n[#function;is_none;{=_is_none__obj}]\r\n    // Return whether a variable is empty.\r\n    // Requires: `{bool.fromExpr}`\r\n    {return;{bool.fromExpr;{$_is_none__obj}===}}\r\n[/function]\r\n\r\n[#function;inc;{=_inc__varname};{=_inc__value}]\r\n    // Shortcut for `x += y`.\r\n    // The first argument is the variable *name*, the second is the\r\n    // amount to increment, defaulting to 1.\r\n\r\n    // Uses scope fuckery to immitate passing by reference.\r\n    // Might break with updates.\r\n    {=_inc__value;{or;{$_inc__value};1}}\r\n    {={$_inc__varname};{math;{${$_inc__varname}}+{$_inc__value}}}\r\n[/function]\r\n",
      "cooldownSeconds": 0,
      "createdAt": "2022-11-12T03:27:51.090Z",
      "updatedAt": "2023-03-16T18:44:07.054Z",
      "task": null
    }
  ]
}